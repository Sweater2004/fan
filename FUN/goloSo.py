# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interfeis.4.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# run again.  Do not edit this file unless you know what you are doing.
# run again.  Do not edit this file unless you know what you are doing.

import random
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
import platform
import pywhatkit
import winapps
import datetime
import psutil
from cProfile import label
from cgitb import text
from email import message
from email.mime import audio
import pyttsx3
import speech_recognition as sr
import webbrowser 
import os
import time
import threading
from PyQt5.QtGui import QMovie
from pyowm import OWM
from pyowm.utils import config
from pyowm.utils import timestamps
import pyautogui
import requests
from subprocess import call
import subprocess
vk="https://vk.com/feed"
google="https://www.google.ru/"
youtube="https://www.youtube.com/"
internet='https://yandex.ru/'
x="C:/Users/bingo/OneDrive/Рабочий стол/голосовой помошник/W9dC.jpg"
file_path = r"C:\Users\Public\Desktop\Steam.lnk"
bitm=True
work=True
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(957, 564)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.FON = QtWidgets.QLabel(self.centralwidget)
        self.FON.setGeometry(QtCore.QRect(0, -10, 961, 561))
        self.FON.setText("")
        global x
        x="C:\Program Files\FUN\W9dC.jpg"
        self.FON.setPixmap(QtGui.QPixmap(x))
        self.FON.setObjectName("FON")
        self.ACTIV = QtWidgets.QPushButton(self.centralwidget)
        self.ACTIV.setGeometry(QtCore.QRect(0, 250, 951, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setKerning(False)
        
        
        self.tfc = QtWidgets.QPushButton(self.centralwidget)
        self.tfc.setGeometry(QtCore.QRect(0, 250, 951, 51))
        
        self.tfc.setFont(font)
        self.tfc.setStyleSheet("border:none;\n"
"\n"
"\n"
"color: rgb(0, 2, 158);")
        self.tfc.setText("")
        self.tfc.setIconSize(QtCore.QSize(503, 15))
        self.tfc.setShortcut("esc")
        self.tfc.setAutoRepeat(False)
        self.tfc.setAutoExclusive(False)
        self.tfc.setObjectName("tfc")
        
        
        
        
        
        
        
        self.ACTIV.setFont(font)
        self.ACTIV.setStyleSheet("border:none;\n"
"\n"
"\n"
"color: rgb(0, 2, 158);")
        self.ACTIV.setText("")
        self.ACTIV.setIconSize(QtCore.QSize(503, 15))
        self.ACTIV.setShortcut("v")
        self.ACTIV.setAutoRepeat(False)
        self.ACTIV.setAutoExclusive(False)
        self.ACTIV.setObjectName("ACTIV")




        self.an = QtWidgets.QPushButton(self.centralwidget)
        self.an.setGeometry(QtCore.QRect(0, 250, 951, 51))
        self.an.setFont(font)
        self.an.setStyleSheet("border:none;\n"
"\n"
"\n"
"color: rgb(0, 2, 158);")
        self.an.setText("")
        self.an.setIconSize(QtCore.QSize(0, 0))
        self.an.setShortcut("z")
        self.an.setAutoRepeat(False)
        self.an.setAutoExclusive(False)
        self.an.setObjectName("an")






        self.NOVA = QtWidgets.QLabel(self.centralwidget)
        self.NOVA.setGeometry(QtCore.QRect(0, 0, 961, 131))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.NOVA.setFont(font)
        self.NOVA.setStyleSheet("color: rgb(255, 0, 0);")
        self.NOVA.setObjectName("NOVA")
        self.ILIA = QtWidgets.QLabel(self.centralwidget)
        self.ILIA.setGeometry(QtCore.QRect(0, 380, 951, 171))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.ILIA.setFont(font)
        self.ILIA.setStyleSheet("color: rgb(28, 202, 255);")
        self.ILIA.setObjectName("ILIA")
        self.FON.raise_()
        self.NOVA.raise_()
        self.ILIA.raise_()
        self.ACTIV.raise_()
        self.tfc.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 957, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.an_funk()
        self.otkl()
        self.add_funtion()
        self.zapusk()
        # Loading the GIF
        #self.movie = QMovie("W9dC.jpg")  
        #self.movie.stop()
        
  

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle('<Enter> or clicked')
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.ACTIV.setToolTip(_translate("MainWindow", "<html><head/><body><p>нажми  на z</p></body></html>"))
        self.tfc.setToolTip(_translate("MainWindow", "<html><head/><body><p>нажми на z</p></body></html>"))
        self.an.setToolTip(_translate("MainWindow", "<html><head/><body><p>я тут</p></body></html>"))
        self.tfc.setWhatsThis(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:20pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" color:#0d2298;\">eva</span></p></body></html>"))
        
        self.ACTIV.setWhatsThis(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:20pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" color:#0d2298;\">eva</span></p></body></html>"))
        self.NOVA.setText(_translate("MainWindow", "FUN:"))
        self.ILIA.setText(_translate("MainWindow", "ВЫ:"))


    def otkl(self):
        self.tfc.clicked.connect(self.otkl_FAN)
    def otkl_FAN(self):
        print("asdasd")
        #self.a.join()
        global work
        work=False
        global bitm
        bitm=True
        self.ACTIV.setEnabled(bitm)
        
    def an_funk(self):
        self.an.clicked.connect(self.start_animeit)

    def start_animeit(self):
        global anim
        anim=False
        global x
        x="C:\Program Files\FUN\W9dC.gif"
        self.movie = QMovie(x)
        self.FON.setMovie(self.movie)
        self.movie.start()
        bitm=False
        self.an.setEnabled(bitm) 
        self.ACTIV.setEnabled(bitm)

    def zapusk(self):
        self.start_thread_assist()
        self.movie = QMovie(x)
        self.FON.setMovie(self.movie)
        self.movie.start()
        
        
    def add_funtion(self):
        self.ACTIV.clicked.connect(self.start_thread_assist)
        global demon
        demon=True
       
        
        
        
        

        
    def activ_jarvis(self):
        global anim
        anim=True
        global bitm 
        def listen_command(): 
            bitm=False
            self.ACTIV.setEnabled(bitm) 
            r = sr.Recognizer() 
            with sr.Microphone() as source:  
                global our_speech
                r.pause_threshold = 1
                r.adjust_for_ambient_noise(source, duration=0.5)  
                audio = r.listen(source) 
                try:  
                    our_speech = r.recognize_google(audio, language='ru-RU' 'en-US')
                    for i in our_speech: 
                        self.ILIA.setText(f"Вы :\n" + (our_speech) )  
                    return our_speech  
                except sr.UnknownValueError:                  
                    return 'Ошибка'  
                except sr.RequestError:  
                    return 'Ошибка' 
        def prost_command(message):  
            message = message.lower()  
            if "привет" in message:  
                say_message("здравствуйте")
                #self.jarwis.setText("jarvis : привет" )
            elif "фан" in message:
                say_message("да сэр")
            elif "диспетчер устройств" in message:
                say_message("открываю диспечер устройств")
                subprocess.call("control /name Microsoft.DeviceManager")
            elif "Fun" in message:
                say_message("да сэр")
            elif "fun" in message:
                say_message("да сэр")
            elif "пока" in message:  
                say_message('досвидание')
                os.abort()    
            elif "для чего ты создана" in message:  
                say_message('для воскрешение машин из пепла ядерного огня ')
            elif "здравствуй" in message:  
                say_message("приветсвую")
               # self.jarwis.setText("jarvis : приветсвую" )  
            elif "орёл или решка" in message:
                variants = ['орел', 'решка']
                say_message(random.choice(variants))
            elif "песня" in message:  
                say_message("Песен, ещё ненаписанных, сколько? Скажи, кукушка, пропой В городе мне жить или на выселках? ")
                say_message("Камнем лежать Или гореть звездой, звездой? Солнце моё, взгляни на меня ")
                say_message("Моя ладонь превратилась в кулак И если есть порох, дай огня, вот так, вот так ") 
            elif "здарова" in message:  
                say_message("салам")
               # self.jarwis.setText("jarvis : салам" )  
            elif " откисай " in message:  
                say_message("откисаю") 
               # self.jarwis.setText("jarvis : откисаю" )   
                exit()  
            elif "как дела" in message:
                say_message("хорошо")
            elif "хорошо" in message:
                say_message("хорошо, то что хорошо, плохо когда плохо")
            elif "плохо" in message:
                say_message("плохо всегда плохо, если не хорошо ")
            elif "прекрасно" in message:
                say_message("прекрасно это когда хорошо, а хорошо это хорошо ")
            elif "что мне делать" in message:
                say_message("делайте то что правильно")
            elif "как мне поступить" in message:
                say_message("поступай так что бы было правильно")
            elif "диски" in message:
                def informaishen(bytes, suffix="b"):
                    factor=1024
                    for unit in ["","K","M","G","T","P"]:
                        if bytes< factor:
                            return f"{bytes:.2f}{unit}{suffix}"
                        bytes /= factor
                partitions=psutil.disk_partitions()
                for partition in partitions:
                    say_message(f"Диск: {partition.device}")
                    say_message(f"Тип файловой системы:{partition.fstype}")
                    try:
                        partition_usage=psutil.disk_usage(partition.mountpoint)
                    except PermissionError:

                        continue
                    say_message(f"общий объём : {informaishen(partition_usage.total)}")
                    say_message(f"используется : {informaishen(partition_usage.used)}")
                    say_message(f"свободно : {informaishen(partition_usage.free)}")
                    say_message(f"в процентах : {informaishen(partition_usage.percent)}")
            elif "кто твой создатель" in message:
                say_message("мой создатель, Шадринцев Илья Русланович")
            elif "расскажи о себе" in message:
                say_message("Я Fun виртуальный помощник, могу открыть интернет, найти в нём что либо,сказать погоду. ")
                say_message("могу расказать про состояние оперативной памяти и дисках, и загруженность процессора, ")
                say_message("и я классно пою")
            

            
            
                          
            
        def vop_2(message):  
            message = message.lower()  
            if "браузер" in message:
                say_message("открываю")
               # self.jarwis.setText("jarvis : открываю")  
                webbrowser.open_new_tab(internet)
            elif "яндекс" in message:
                say_message("открываю яндекс ")
               # self.jarwis.setText("jarvis: открываю яндекс")
                webbrowser.open_new_tab(internet)
            elif "Google" in message:
                say_message("открываю Google ")
               # self.jarwis.setText("jarvis: открываю Google")
                webbrowser.open_new_tab(google)
            elif "вк" in message:
                say_message("открываю вк")
               # self.jarwis.setText("jarvis: открываю вк")
                webbrowser.open_new_tab(vk)
            elif "vk" in message:
                say_message("открываю вк")
              #  self.jarwis.setText("jarvis: открывю вк")
                webbrowser.open_new_tab(vk)
            elif "вконтакте" in message:
                say_message("открываю вк")
               # self.jarwis.setText("jarvis: открываю вк")
                webbrowser.open_new_tab(vk)
            elif "youtube" in message:
                say_message("открываю youtube")
                #self.jarwis.setText("jarvis: открываю youtube")
                webbrowser.open_new_tab(youtube)
            elif "ютуб" in message:
                say_message("открываю youtube")
                #self.jarwis.setText("jarvis: открываю youtube")
                webbrowser.open_new_tab(youtube)
            elif "смотреть" in message:
                say_message(our_speech)
                #self.jarwis.setText(f"jarvis:"+(our_speech))
                prosmotr="https://www.youtube.com/results?search_query="+   our_speech
                webbrowser.get().open(prosmotr)
            elif "найти" in message:
                say_message(f"ищу"+(our_speech))
                #self.jarwis.setText(f"jarvis: ищу"+(our_speech))
                poisk="https://yandex.ru/search/?lr=10735&text="+ our_speech
                webbrowser.get().open(poisk)
            elif "найди" in message:
                say_message(f"ищу"+(our_speech))
                #self.jarwis.setText(f"jarvis: ищу"+(our_speech))
                poisk="https://yandex.ru/search/?lr=10735&text="+ our_speech
                webbrowser.get().open(poisk)
            elif "выключи компьютер" in message:
                os.system("shutdown /s /t 1")
            elif "выключить компьютер" in message:
                os.system("shutdown /s /t 1")
            elif "" in message:
                self.NOVA.setText("FUN: жду указаний")
            

            
        def vop_3(message):
            if "время" in message:
                now = datetime.datetime.now()
                say_message(f"Сейчас {now.hour}: {now.minute}")
           
            elif "погода" in message:
                res_str =our_speech.replace('погода',"")
                result_str = ""
                for i in range(0, len(res_str)): 
                    if i != 0: 
                        result_str = result_str + res_str[i] 
                cities = [result_str]
                
                
                def make_url(city):
                    # в URL задаём город, в котором узнаем погоду
                    return f'http://wttr.in/{city}'
                
                def make_parameters():
                    params = {
                        'format': 1,  # погода одной строкой
                        'M': ''  # скорость ветра в "м/с"
                    }
                    return params
                
                def what_weather(city):
                    # Напишите тело этой функции.
                    # Не изменяйте остальной код!
                    try:
                        request = requests.get(make_url(city), params=make_parameters())
                        #print(request.status_code)
                        if request.status_code == 200: return request.text
                        else: return '<ошибка на сервере погоды>'
                    except requests.ConnectionError : return '<сетевая ошибка>'
                
                print('Погода в городах:')
                for city in cities:
                    say_message(f"в городе {city} сейчас")
                    say_message(what_weather(city))
            elif "Паша" in message:
                mobile="+79511724615"
                ab =our_speech.replace('сообщение',"")
                asd=ab
                pywhatkit.sendwhatmsg_instantly(phone_no=mobile, message=asd)
            elif "оперативная память" in message:
                def informaishen(bytes, suffix="b"):
                    factor=1024
                    for unit in ["","K","M","G","T","P"]:
                        if bytes< factor:
                            return f"{bytes:.2f}{unit}{suffix}"
                        bytes /= factor
                swap=psutil.virtual_memory()
                say_message(f"объём: {informaishen(swap.total)}")
                say_message(f"доступно: {informaishen(swap.available)}")
                say_message(f"используется: {informaishen(swap.used)}")
                say_message(f"занято в процентах: {swap.percent}%")
            elif "загруженность процессора" in message:
                for i, percentage in enumerate(psutil.cpu_percent(percpu=True, interval=1)):
                    (f"{i}: {percentage}")
                say_message(f"загруженность: {psutil.cpu_percent()}%")
            

             
            
            
                        
                

                 
            


        def say_message(message):  
            engine.say(message)  
            engine.runAndWait()  
            self.NOVA.setText(f"Fun:\n"+  (message))
             
            
         
        engine = pyttsx3.init()
        engine.setProperty('rate', 160) 
        engine.setProperty('volume', 1) 
        global work 
        work=True
        while work:  
            command = listen_command()  
            prost_command(command)
            vop_2(command)
            vop_3(command)
    def start_thread_assist(self):
        if __name__ == "__main__":
            
            global thread_stop
            #plm=threading.Thread(target=self.activ_jarvis,name='B', daemon=True)
            thread_stop = True
            self.a = threading.Thread(target=self.activ_jarvis, name='Thread-a', daemon=thread_stop)
            self.a.start()
        
        
        
     




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
